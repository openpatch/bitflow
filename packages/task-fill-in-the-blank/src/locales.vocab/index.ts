// This file is automatically generated by Vocab.
// To make changes update translation.json files directly.

import { createLanguage, createTranslationFile } from "@vocab/core/runtime";

const translations = createTranslationFile<
  "en-GB" | "en" | "en-US" | "de" | "fr" | "es" | "nl" | "pt" | "tr",
  {
    "add-pattern": () => "Add Pattern";
    answers: () => "Answers";
    "delete-pattern": () => "Delete";
    description: () => "A task bit allowing to create fill in the blank texts. The text can be written in Markdown. The strike-through syntax will create a blank. The answers of a user can be automatically evaluated, if you provide regular expressions for the blanks. You can also provide feedback by using regular expression, as well.";
    error: () => "Error";
    "example.blank.a": () => "[Bb]itflow";
    "example.blank.a.feedback.message": () => "How is this library called?";
    "example.blank.a.feedback.pattern": () => "^(?![Bb]itflow).*$";
    "example.blank.b": () => "[Aa]ssessments|[Tt]ests";
    "example.instruction": () => "Complete the sentence!";
    "example.textWithBlanks": () => "~~a~~ is a library for creating and conducting flow-based ~~b~~.";
    "feedback-for-blank": (values: { blank: string }) => string;
    info: () => "Info";
    instruction: () => "Instruction";
    message: () => "Message";
    name: () => "Fill in the blank";
    pattern: (values: { pattern: string }) => string;
    "pattern-error-duplicate": () => "A pattern can not contain duplicates";
    "pattern-error-exists": () => "This pattern already exists";
    "pattern-error-invalid": () => "Not a valid pattern";
    "pattern-for-blank": (values: { blank: string }) => string;
    "pattern-regex": () => "Pattern";
    "pattern-regex-helper-text": () => "You can use a regular expression";
    patterns: () => "Patterns";
    severity: () => "Severity";
    success: () => "Success";
    "text-with-blanks": () => "Text with blanks";
    "text-with-blanks-helper-text": () => "A blank can be defined like so: ~~ID~~. Markdown is supported, but blanks do not work in advanced sections like code blocks.";
    up: () => "Up";
    warning: () => "Warning";
  }
>({
  "en-GB": createLanguage({
    "add-pattern": "Add Pattern",
    answers: "Answers",
    "delete-pattern": "Delete",
    description:
      "A task bit allowing to create fill in the blank texts. The text can be written in Markdown. The strike-through syntax will create a blank. The answers of a user can be automatically evaluated, if you provide regular expressions for the blanks. You can also provide feedback by using regular expression, as well.",
    error: "Error",
    "example.blank.a": "[Bb]itflow",
    "example.blank.a.feedback.message": "How is this library called?",
    "example.blank.a.feedback.pattern": "^(?![Bb]itflow).*$",
    "example.blank.b": "[Aa]ssessments|[Tt]ests",
    "example.instruction": "Complete the sentence!",
    "example.textWithBlanks":
      "~~a~~ is a library for creating and conducting flow-based ~~b~~.",
    "feedback-for-blank": "Feedback for {blank}",
    info: "Info",
    instruction: "Instruction",
    message: "Message",
    name: "Fill in the blank",
    pattern: "Pattern {pattern}",
    "pattern-error-duplicate": "A pattern can not contain duplicates",
    "pattern-error-exists": "This pattern already exists",
    "pattern-error-invalid": "Not a valid pattern",
    "pattern-for-blank": "Pattern for {blank}",
    "pattern-regex": "Pattern",
    "pattern-regex-helper-text": "You can use a regular expression",
    patterns: "Patterns",
    severity: "Severity",
    success: "Success",
    "text-with-blanks": "Text with blanks",
    "text-with-blanks-helper-text":
      "A blank can be defined like so: ~~ID~~. Markdown is supported, but blanks do not work in advanced sections like code blocks.",
    up: "Up",
    warning: "Warning",
  }),
  en: createLanguage({
    "add-pattern": "Add Pattern",
    answers: "Answers",
    "delete-pattern": "Delete",
    description:
      "A task bit allowing to create fill in the blank texts. The text can be written in Markdown. The strike-through syntax will create a blank. The answers of a user can be automatically evaluated, if you provide regular expressions for the blanks. You can also provide feedback by using regular expression, as well.",
    error: "Error",
    "example.blank.a": "[Bb]itflow",
    "example.blank.a.feedback.message": "How is this library called?",
    "example.blank.a.feedback.pattern": "^(?![Bb]itflow).*$",
    "example.blank.b": "[Aa]ssessments|[Tt]ests",
    "example.instruction": "Complete the sentence!",
    "example.textWithBlanks":
      "~~a~~ is a library for creating and conducting flow-based ~~b~~.",
    "feedback-for-blank": "Feedback for {blank}",
    info: "Info",
    instruction: "Instruction",
    message: "Message",
    name: "Fill in the blank",
    pattern: "Pattern {pattern}",
    "pattern-error-duplicate": "A pattern can not contain duplicates",
    "pattern-error-exists": "This pattern already exists",
    "pattern-error-invalid": "Not a valid pattern",
    "pattern-for-blank": "Pattern for {blank}",
    "pattern-regex": "Pattern",
    "pattern-regex-helper-text": "You can use a regular expression",
    patterns: "Patterns",
    severity: "Severity",
    success: "Success",
    "text-with-blanks": "Text with blanks",
    "text-with-blanks-helper-text":
      "A blank can be defined like so: ~~ID~~. Markdown is supported, but blanks do not work in advanced sections like code blocks.",
    up: "Up",
    warning: "Warning",
  }),
  "en-US": createLanguage({
    "add-pattern": "Add Pattern",
    answers: "Answers",
    "delete-pattern": "Delete",
    description:
      "A task bit allowing to create fill in the blank texts. The text can be written in Markdown. The strike-through syntax will create a blank. The answers of a user can be automatically evaluated, if you provide regular expressions for the blanks. You can also provide feedback by using regular expression, as well.",
    error: "Error",
    "example.blank.a": "[Bb]itflow",
    "example.blank.a.feedback.message": "How is this library called?",
    "example.blank.a.feedback.pattern": "^(?![Bb]itflow).*$",
    "example.blank.b": "[Aa]ssessments|[Tt]ests",
    "example.instruction": "Complete the sentence!",
    "example.textWithBlanks":
      "~~a~~ is a library for creating and conducting flow-based ~~b~~.",
    "feedback-for-blank": "Feedback for {blank}",
    info: "Info",
    instruction: "Instruction",
    message: "Message",
    name: "Fill in the blank",
    pattern: "Pattern {pattern}",
    "pattern-error-duplicate": "A pattern can not contain duplicates",
    "pattern-error-exists": "This pattern already exists",
    "pattern-error-invalid": "Not a valid pattern",
    "pattern-for-blank": "Pattern for {blank}",
    "pattern-regex": "Pattern",
    "pattern-regex-helper-text": "You can use a regular expression",
    patterns: "Patterns",
    severity: "Severity",
    success: "Success",
    "text-with-blanks": "Text with blanks",
    "text-with-blanks-helper-text":
      "A blank can be defined like so: ~~ID~~. Markdown is supported, but blanks do not work in advanced sections like code blocks.",
    up: "Up",
    warning: "Warning",
  }),
  de: createLanguage({
    "add-pattern": "Add Pattern",
    answers: "Answers",
    "delete-pattern": "Delete",
    description:
      "A task bit allowing to create fill in the blank texts. The text can be written in Markdown. The strike-through syntax will create a blank. The answers of a user can be automatically evaluated, if you provide regular expressions for the blanks. You can also provide feedback by using regular expression, as well.",
    error: "Error",
    "example.blank.a": "[Bb]itflow",
    "example.blank.a.feedback.message": "How is this library called?",
    "example.blank.a.feedback.pattern": "^(?![Bb]itflow).*$",
    "example.blank.b": "[Aa]ssessments|[Tt]ests",
    "example.instruction": "Complete the sentence!",
    "example.textWithBlanks":
      "~~a~~ is a library for creating and conducting flow-based ~~b~~.",
    "feedback-for-blank": "Feedback for {blank}",
    info: "Info",
    instruction: "Instruction",
    message: "Message",
    name: "Fill in the blank",
    pattern: "Pattern {pattern}",
    "pattern-error-duplicate": "A pattern can not contain duplicates",
    "pattern-error-exists": "This pattern already exists",
    "pattern-error-invalid": "Not a valid pattern",
    "pattern-for-blank": "Pattern for {blank}",
    "pattern-regex": "Pattern",
    "pattern-regex-helper-text": "You can use a regular expression",
    patterns: "Patterns",
    severity: "Severity",
    success: "Success",
    "text-with-blanks": "Text with blanks",
    "text-with-blanks-helper-text":
      "A blank can be defined like so: ~~ID~~. Markdown is supported, but blanks do not work in advanced sections like code blocks.",
    up: "Up",
    warning: "Warning",
  }),
  fr: createLanguage({
    "add-pattern": "Add Pattern",
    answers: "Answers",
    "delete-pattern": "Delete",
    description:
      "A task bit allowing to create fill in the blank texts. The text can be written in Markdown. The strike-through syntax will create a blank. The answers of a user can be automatically evaluated, if you provide regular expressions for the blanks. You can also provide feedback by using regular expression, as well.",
    error: "Error",
    "example.blank.a": "[Bb]itflow",
    "example.blank.a.feedback.message": "How is this library called?",
    "example.blank.a.feedback.pattern": "^(?![Bb]itflow).*$",
    "example.blank.b": "[Aa]ssessments|[Tt]ests",
    "example.instruction": "Complete the sentence!",
    "example.textWithBlanks":
      "~~a~~ is a library for creating and conducting flow-based ~~b~~.",
    "feedback-for-blank": "Feedback for {blank}",
    info: "Info",
    instruction: "Instruction",
    message: "Message",
    name: "Fill in the blank",
    pattern: "Pattern {pattern}",
    "pattern-error-duplicate": "A pattern can not contain duplicates",
    "pattern-error-exists": "This pattern already exists",
    "pattern-error-invalid": "Not a valid pattern",
    "pattern-for-blank": "Pattern for {blank}",
    "pattern-regex": "Pattern",
    "pattern-regex-helper-text": "You can use a regular expression",
    patterns: "Patterns",
    severity: "Severity",
    success: "Success",
    "text-with-blanks": "Text with blanks",
    "text-with-blanks-helper-text":
      "A blank can be defined like so: ~~ID~~. Markdown is supported, but blanks do not work in advanced sections like code blocks.",
    up: "Up",
    warning: "Warning",
  }),
  es: createLanguage({
    "add-pattern": "Add Pattern",
    answers: "Answers",
    "delete-pattern": "Delete",
    description:
      "A task bit allowing to create fill in the blank texts. The text can be written in Markdown. The strike-through syntax will create a blank. The answers of a user can be automatically evaluated, if you provide regular expressions for the blanks. You can also provide feedback by using regular expression, as well.",
    error: "Error",
    "example.blank.a": "[Bb]itflow",
    "example.blank.a.feedback.message": "How is this library called?",
    "example.blank.a.feedback.pattern": "^(?![Bb]itflow).*$",
    "example.blank.b": "[Aa]ssessments|[Tt]ests",
    "example.instruction": "Complete the sentence!",
    "example.textWithBlanks":
      "~~a~~ is a library for creating and conducting flow-based ~~b~~.",
    "feedback-for-blank": "Feedback for {blank}",
    info: "Info",
    instruction: "Instruction",
    message: "Message",
    name: "Fill in the blank",
    pattern: "Pattern {pattern}",
    "pattern-error-duplicate": "A pattern can not contain duplicates",
    "pattern-error-exists": "This pattern already exists",
    "pattern-error-invalid": "Not a valid pattern",
    "pattern-for-blank": "Pattern for {blank}",
    "pattern-regex": "Pattern",
    "pattern-regex-helper-text": "You can use a regular expression",
    patterns: "Patterns",
    severity: "Severity",
    success: "Success",
    "text-with-blanks": "Text with blanks",
    "text-with-blanks-helper-text":
      "A blank can be defined like so: ~~ID~~. Markdown is supported, but blanks do not work in advanced sections like code blocks.",
    up: "Up",
    warning: "Warning",
  }),
  nl: createLanguage({
    "add-pattern": "Add Pattern",
    answers: "Answers",
    "delete-pattern": "Delete",
    description:
      "A task bit allowing to create fill in the blank texts. The text can be written in Markdown. The strike-through syntax will create a blank. The answers of a user can be automatically evaluated, if you provide regular expressions for the blanks. You can also provide feedback by using regular expression, as well.",
    error: "Error",
    "example.blank.a": "[Bb]itflow",
    "example.blank.a.feedback.message": "How is this library called?",
    "example.blank.a.feedback.pattern": "^(?![Bb]itflow).*$",
    "example.blank.b": "[Aa]ssessments|[Tt]ests",
    "example.instruction": "Complete the sentence!",
    "example.textWithBlanks":
      "~~a~~ is a library for creating and conducting flow-based ~~b~~.",
    "feedback-for-blank": "Feedback for {blank}",
    info: "Info",
    instruction: "Instruction",
    message: "Message",
    name: "Fill in the blank",
    pattern: "Pattern {pattern}",
    "pattern-error-duplicate": "A pattern can not contain duplicates",
    "pattern-error-exists": "This pattern already exists",
    "pattern-error-invalid": "Not a valid pattern",
    "pattern-for-blank": "Pattern for {blank}",
    "pattern-regex": "Pattern",
    "pattern-regex-helper-text": "You can use a regular expression",
    patterns: "Patterns",
    severity: "Severity",
    success: "Success",
    "text-with-blanks": "Text with blanks",
    "text-with-blanks-helper-text":
      "A blank can be defined like so: ~~ID~~. Markdown is supported, but blanks do not work in advanced sections like code blocks.",
    up: "Up",
    warning: "Warning",
  }),
  pt: createLanguage({
    "add-pattern": "Add Pattern",
    answers: "Answers",
    "delete-pattern": "Delete",
    description:
      "A task bit allowing to create fill in the blank texts. The text can be written in Markdown. The strike-through syntax will create a blank. The answers of a user can be automatically evaluated, if you provide regular expressions for the blanks. You can also provide feedback by using regular expression, as well.",
    error: "Error",
    "example.blank.a": "[Bb]itflow",
    "example.blank.a.feedback.message": "How is this library called?",
    "example.blank.a.feedback.pattern": "^(?![Bb]itflow).*$",
    "example.blank.b": "[Aa]ssessments|[Tt]ests",
    "example.instruction": "Complete the sentence!",
    "example.textWithBlanks":
      "~~a~~ is a library for creating and conducting flow-based ~~b~~.",
    "feedback-for-blank": "Feedback for {blank}",
    info: "Info",
    instruction: "Instruction",
    message: "Message",
    name: "Fill in the blank",
    pattern: "Pattern {pattern}",
    "pattern-error-duplicate": "A pattern can not contain duplicates",
    "pattern-error-exists": "This pattern already exists",
    "pattern-error-invalid": "Not a valid pattern",
    "pattern-for-blank": "Pattern for {blank}",
    "pattern-regex": "Pattern",
    "pattern-regex-helper-text": "You can use a regular expression",
    patterns: "Patterns",
    severity: "Severity",
    success: "Success",
    "text-with-blanks": "Text with blanks",
    "text-with-blanks-helper-text":
      "A blank can be defined like so: ~~ID~~. Markdown is supported, but blanks do not work in advanced sections like code blocks.",
    up: "Up",
    warning: "Warning",
  }),
  tr: createLanguage({
    "add-pattern": "Add Pattern",
    answers: "Answers",
    "delete-pattern": "Delete",
    description:
      "A task bit allowing to create fill in the blank texts. The text can be written in Markdown. The strike-through syntax will create a blank. The answers of a user can be automatically evaluated, if you provide regular expressions for the blanks. You can also provide feedback by using regular expression, as well.",
    error: "Error",
    "example.blank.a": "[Bb]itflow",
    "example.blank.a.feedback.message": "How is this library called?",
    "example.blank.a.feedback.pattern": "^(?![Bb]itflow).*$",
    "example.blank.b": "[Aa]ssessments|[Tt]ests",
    "example.instruction": "Complete the sentence!",
    "example.textWithBlanks":
      "~~a~~ is a library for creating and conducting flow-based ~~b~~.",
    "feedback-for-blank": "Feedback for {blank}",
    info: "Info",
    instruction: "Instruction",
    message: "Message",
    name: "Fill in the blank",
    pattern: "Pattern {pattern}",
    "pattern-error-duplicate": "A pattern can not contain duplicates",
    "pattern-error-exists": "This pattern already exists",
    "pattern-error-invalid": "Not a valid pattern",
    "pattern-for-blank": "Pattern for {blank}",
    "pattern-regex": "Pattern",
    "pattern-regex-helper-text": "You can use a regular expression",
    patterns: "Patterns",
    severity: "Severity",
    success: "Success",
    "text-with-blanks": "Text with blanks",
    "text-with-blanks-helper-text":
      "A blank can be defined like so: ~~ID~~. Markdown is supported, but blanks do not work in advanced sections like code blocks.",
    up: "Up",
    warning: "Warning",
  }),
});

export default translations;
